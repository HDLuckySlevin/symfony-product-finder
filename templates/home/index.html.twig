{% extends 'base.html.twig' %}

{% block title %}Product Finder - Home{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 text-center">
            <h1 class="mb-4">Product-Finder</h1>
            <p class="lead mb-5">Finden Sie das perfekte Elektronikprodukt mit Hilfe von künstlicher Intelligenz. Beschreiben Sie einfach, was Sie suchen, und unser System findet die passenden Produkte für Sie.</p>
            
            <div class="card shadow-lg">
                <div class="card-body p-5">
                    <h2 class="mb-4">Wie kann ich Ihnen helfen?</h2>
                    <p>Beschreiben Sie Ihre Anforderungen in natürlicher Sprache:</p>
                    
                    <div class="chat-container mb-4">
                        <div id="chat-messages" class="chat-messages mb-3">
                            <!-- Chat messages will appear here -->
                        </div>
                        
                        <div class="input-group mb-2">
                            <input type="text" id="user-input" class="form-control" placeholder="z.B. Ich suche ein wasserdichtes Smartphone mit guter Kamera...">
                            <button class="btn btn-primary" id="send-button">Suchen</button>
                            <button class="btn btn-secondary" id="record-button">Sprache aufnehmen</button>
                        </div>
                        <div class="input-group">
                            <input type="file" id="image-input" class="form-control" accept="image/*">
                            <button class="btn btn-secondary" id="upload-button">Bild hochladen</button>
                        </div>
                        <button class="btn btn-secondary mt-2" id="open-camera-button" style="display: none;">Foto aufnehmen</button>
                        <div id="camera-container" class="mt-2" style="display: none;">
                            <video id="video-preview" class="w-100 mb-2" autoplay playsinline></video>
                            <button class="btn btn-secondary" id="capture-button">Aufnehmen</button>
                        </div>
                    </div>
                    
                    <div id="results-container" class="mt-4" style="display: none;">
                        <h3>Gefundene Produkte</h3>
                        <div id="product-results" class="row">
                            <!-- Product results will appear here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-5">
                <h3>Wie funktioniert es?</h3>
                <p>Der Product-Finder kombiniert künstliche Intelligenz mit einer Vektor-Datenbank, um Ihre Suche komfortabel zu gestalten.</p>
                <ol class="text-start">
                    <li><strong>Import &amp; Vektorisierung:</strong> Produktdaten werden aus XML-Dateien eingelesen und als Vektoren in Milvus gespeichert.</li>
                    <li><strong>Anfrage stellen:</strong> Geben Sie Ihre Wünsche per Text, Sprache oder Bild ein.</li>
                    <li><strong>Semantische Suche:</strong> Die Anfrage wird vektorisiert und mit den Produkten abgeglichen.</li>
                    <li><strong>Antwort generieren:</strong> OpenAI fasst die Resultate zusammen und erstellt Empfehlungen.</li>
                    <li><strong>Ergebnisse anzeigen:</strong> Passende Produkte erscheinen im Chat.</li>
                </ol>
                <div class="mt-4">
                    <pre class="mermaid">
sequenceDiagram
    actor Nutzer
    participant UI as Weboberfläche
    participant API as Controller
    participant Milvus
    participant OpenAI
    Nutzer->>UI: Anfrage/ Bild/ Audio
    UI->>API: Anfrage senden
    API->>OpenAI: Embedding erstellen
    API->>Milvus: Produkte suchen
    Milvus-->>API: Liste
    API->>OpenAI: Empfehlung generieren
    OpenAI-->>API: Antwort
    API-->>UI: Ergebnisse
    UI-->>Nutzer: Produkte anzeigen
                    </pre>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
<script>mermaid.initialize({ startOnLoad: true });</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatMessages = document.getElementById('chat-messages');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const recordButton = document.getElementById('record-button');
        const canRecord = typeof MediaRecorder !== 'undefined';
        if (!canRecord) {
            recordButton.style.display = 'none';
        }
        const imageInput = document.getElementById('image-input');
        const uploadButton = document.getElementById('upload-button');
        const openCameraButton = document.getElementById('open-camera-button');
        const cameraContainer = document.getElementById('camera-container');
        const videoPreview = document.getElementById('video-preview');
        const captureButton = document.getElementById('capture-button');
        let cameraStream = null;
        let mediaRecorder = null;
        let recordedChunks = [];
        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
            navigator.mediaDevices.enumerateDevices().then(devices => {
                if (devices.some(d => d.kind === 'videoinput')) {
                    openCameraButton.style.display = 'inline-block';
                }
            }).catch(() => {});
        }
        const resultsContainer = document.getElementById('results-container');
        const productResults = document.getElementById('product-results');
        const controls = [sendButton, recordButton, uploadButton, openCameraButton];
        let busy = false;

        function setBusy(state) {
            busy = state;
            controls.forEach(el => { if (el) el.disabled = state; });
        }
        setBusy(false);
        
        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'message user-message' : 'message system-message';
            messageDiv.innerHTML = `<p>${content}</p>`;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function addImageMessage(file) {
            const reader = new FileReader();
            reader.onload = e => {
                addMessage(`<img src="${e.target.result}" class="img-fluid w-150p rounded" />`, true);
            };
            reader.readAsDataURL(file);
        }

        function searchProducts(query) {
            addMessage('Suche nach passenden Produkten...', false);

            fetch('/api/search/text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: query })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.response) {
                        addMessage(data.response, false);
                    }
                    if (Array.isArray(data.products)) {
                        displayProducts(data.products);
                    }
                } else {
                    const msg = data.message || 'Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.';
                    addMessage(msg, false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                addMessage('Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.', false);
            });
        }

        function searchImage(file) {
            if (!file) {
                return;
            }
            addImageMessage(file);
            addMessage('Bild wird verarbeitet...', false);

            const formData = new FormData();
            formData.append('image', file, file.name || 'upload.png');

            fetch('/api/search/image', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.response) {
                        addMessage(data.response, false);
                    }
                    if (Array.isArray(data.products)) {
                        displayProducts(data.products);
                    }
                } else {
                    const msg = data.message || 'Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.';
                    addMessage(msg, false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                addMessage('Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.', false);
            });
        }

        function searchAudio(blob) {
            if (!blob) {
                return;
            }
            addMessage('Audio wird verarbeitet...', false);

            const formData = new FormData();
            formData.append('audio', blob, 'recording.webm');

            fetch('/api/search/audio', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.response) {
                        addMessage(data.response, false);
                    }
                    if (Array.isArray(data.products)) {
                        displayProducts(data.products);
                    }
                } else {
                    const msg = data.message || 'Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.';
                    addMessage(msg, false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                addMessage('Es ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.', false);
            });
        }
        
        function displayProducts(products) {
            productResults.innerHTML = '';
            
            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'col-md-6 mb-4';
                
                const productName = product.title || 'Unbekanntes Produkt';
                const productId = product.id || 'N/A';
                const score = product.distance ? (product.distance * 100).toFixed(1) + '%' : 'N/A';
                
                productCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">${productName}</h5>
                            <p class="card-text">Produkt-ID: ${productId}</p>
                            <p class="card-text"><small class="text-muted">Relevanz: ${score}</small></p>
                        </div>
                    </div>
                `;
                
                productResults.appendChild(productCard);
            });
            
            resultsContainer.style.display = 'block';
        }
        
        // Event listeners
        sendButton.addEventListener('click', function() {
            const query = userInput.value.trim();
            if (query) {
                addMessage(query, true);
                userInput.value = '';
                searchProducts(query);
            }
        });

        recordButton.addEventListener('click', function() {
            if (!canRecord) {
                alert('Dieser Browser unterstützt keine Audioaufnahme.');
                return;
            }
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
                recordButton.textContent = 'Sprache aufnehmen';
            } else {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
                        recordedChunks = [];
                        mediaRecorder = new MediaRecorder(stream);
                        mediaRecorder.ondataavailable = e => {
                            if (e.data.size > 0) {
                                recordedChunks.push(e.data);
                            }
                        };
                        mediaRecorder.onstop = () => {
                            const blob = new Blob(recordedChunks, { type: 'audio/webm' });
                            searchAudio(blob);
                            stream.getTracks().forEach(t => t.stop());
                        };
                        mediaRecorder.start();
                        recordButton.textContent = 'Stoppen';
                    }).catch(err => {
                        console.error('Audio error', err);
                    });
                }
            }
        });

        uploadButton.addEventListener('click', function() {
            const file = imageInput.files[0];
            if (file) {
                searchImage(file);
                imageInput.value = '';
            }
        });

        openCameraButton.addEventListener('click', function() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {
                    cameraStream = stream;
                    videoPreview.srcObject = stream;
                    cameraContainer.style.display = 'block';
                    openCameraButton.style.display = 'none';
                }).catch(err => {
                    console.error('Camera error', err);
                });
            }
        });

        captureButton.addEventListener('click', function() {
            if (!cameraStream) {
                return;
            }
            const canvas = document.createElement('canvas');
            canvas.width = videoPreview.videoWidth;
            canvas.height = videoPreview.videoHeight;
            canvas.getContext('2d').drawImage(videoPreview, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(blob => {
                if (blob) {
                    searchImage(blob);
                }
            }, 'image/png');
            cameraStream.getTracks().forEach(t => t.stop());
            cameraStream = null;
            cameraContainer.style.display = 'none';
            openCameraButton.style.display = 'inline-block';
        });
        
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const query = userInput.value.trim();
                if (query) {
                    addMessage(query, true);
                    userInput.value = '';
                    searchProducts(query);
                }
            }
        });
        
        // Initial message
        addMessage('Hallo! Wie kann ich Ihnen bei der Suche nach passenden Produkten helfen?', false);
    });
</script>
<style>
    .chat-container {
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .chat-messages {
        height: 300px;
        overflow-y: auto;
        padding: 15px;
        background-color: #f8f9fa;
    }
    
    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 18px;
        max-width: 80%;
        clear: both;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        float: right;
    }
    
    .system-message {
        background-color: #e9ecef;
        color: #212529;
        float: left;
    }

        .message p {
        margin: 0;
    }

    .w-150p {
        width: 150px;
    }
</style>
{% endblock %}
