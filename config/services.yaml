# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Factory\MilvusClientFactory: ~

    Milvus\Client:
        factory: ['@App\Factory\MilvusClientFactory', 'create']
        arguments:
            $token: '%env(MILVUS_TOKEN)%'
            $host: '%env(MILVUS_HOST)%'
            $port: '%env(int:MILVUS_PORT)%'

    App\Service\MilvusVectorStoreService:
        arguments:
            $milvus: '@Milvus\Client'
            $logger: '@Psr\Log\LoggerInterface' # Already autowired but good to be explicit
            $collectionNameBase: '%env(MILVUS_COLLECTION)%' # e.g., "products"
            $textDimension: 768 # Placeholder: Should be configurable, e.g., via env var
            $imageDimension: 512 # Placeholder: Should be configurable, e.g., via env var

    # New Python Embedding Service
    App\Service\PythonEmbeddingGenerator:
        arguments:
            $httpClient: '@Symfony\Contracts\HttpClient\HttpClientInterface'
            $logger: '@Psr\Log\LoggerInterface'
            # $mimeTypeGuesser: '@mime_types_default' # Removed as per new approach
            $embedHost: '%env(APP_EMBED_HOST)%' # Assuming http://localhost or similar
            $embedPort: '%env(EMBED_PORT)%'

    # Bind the EmbeddingGeneratorInterface to the new PythonEmbeddingGenerator
    App\Service\EmbeddingGeneratorInterface: '@App\Service\PythonEmbeddingGenerator'

    # OpenAI client and embedding generator are removed as they are replaced.
    # App\Service\OpenAISearchService might still be needed if it's used for chat completion based on search results.
    # The README mentions "OpenAI API: For embeddings and chat completions".
    # The ProductFinderController uses SearchServiceInterface (mapped to OpenAISearchService) to "generateChatCompletion".
    # So, OpenAISearchService and its related OpenAI\Client should be kept if chat completion is still desired.
    # For now, I will keep OpenAISearchService and its dependencies.
    # If OpenAI is NOT used for chat completion anymore, these should be removed.

    OpenAI\Client: # Keep if OpenAISearchService is used
        factory: ['OpenAI', 'client']
        arguments:
            $apiKey: '%env(OPENAI_API_KEY)%'

    App\Service\OpenAISearchService: # Keep if chat completion feature is still desired
        arguments:
            $chatModel: '%env(OPENAI_CHAT_MODEL)%'

    # Bind the interface to the implementation
    App\Service\SearchServiceInterface: '@App\Service\OpenAISearchService'
