<?php

namespace App\Command;

use App\Service\OpenAIVisionService;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle; // For better looking output, optional

/**
 * Symfony console command to process an image using the OpenAI GPT-4o vision model.
 *
 * This command takes an image path and a text prompt, sends them to the
 * OpenAIVisionService, and displays the textual description generated by the AI.
 */
class ProcessImageCommand extends Command
{
    protected static $defaultName = 'app:process-image';

    /**
     * @var OpenAIVisionService The service responsible for OpenAI API interactions.
     */
    private OpenAIVisionService $visionService;

    /**
     * ProcessImageCommand constructor.
     *
     * @param OpenAIVisionService $visionService The service to interact with OpenAI's vision capabilities.
     */
    public function __construct(OpenAIVisionService $visionService)
    {
        parent::__construct();
        $this->visionService = $visionService;
    }

    protected function configure(): void
    {
        $this
            ->setDescription('Processes an image using OpenAI Vision API and a given prompt.')
            ->addArgument('image_path', InputArgument::REQUIRED, 'The path to the image file.')
            ->addArgument('preprompt', InputArgument::REQUIRED, 'The prompt to send with the image.');
    }

    /**
     * Executes the command to process the image and prompt.
     *
     * Retrieves image path and prompt from arguments, calls the OpenAIVisionService,
     * and outputs the result or an error message.
     *
     * @param InputInterface $input The console input.
     * @param OutputInterface $output The console output.
     * @return int Command::SUCCESS on success, Command::FAILURE on error.
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output); // Optional: for styled output

        $imagePath = $input->getArgument('image_path');
        $preprompt = $input->getArgument('preprompt');

        $io->title('Image Processing Command');
        $io->writeln('Image path: ' . $imagePath);
        $io->writeln('Prompt: ' . $preprompt);
        $io->newLine();

        try {
            $io->section('Attempting to get description from OpenAI Vision API...');
            $imageGptResult = $this->visionService->getDescriptionForImage($imagePath, $preprompt);

            $io->success('Successfully retrieved description:');
            $io->block($imageGptResult);

            return Command::SUCCESS;
        } catch (\InvalidArgumentException $e) {
            $io->error('Invalid argument: ' . $e->getMessage());
            // Optionally, write to $output->getErrorOutput() if you want to separate error streams
            // $errorOutput = $output->getErrorOutput();
            // $errorOutput->writeln('<error>Invalid argument: ' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        } catch (\RuntimeException $e) {
            $io->error('Runtime error during processing: ' . $e->getMessage());
            // $errorOutput = $output->getErrorOutput();
            // $errorOutput->writeln('<error>Runtime error: ' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        } catch (\Exception $e) {
            $io->error('An unexpected error occurred: ' . $e->getMessage());
            // $errorOutput = $output->getErrorOutput();
            // $errorOutput->writeln('<error>Unexpected error: ' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        }
    }
}
